# Build stage for React frontend
FROM node:18-alpine as frontend-build
WORKDIR /frontend
COPY Views/package*.json ./
RUN npm install
COPY Views/ .
RUN npm run build

# Build stage for Django backend
FROM python:3.11-slim as backend-build
WORKDIR /app
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    gcc \
    netcat-traditional \
    --no-install-recommends && \
    rm -rf /var/lib/apt/lists/*
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install gunicorn

# Final production stage
FROM python:3.11-slim
WORKDIR /app

# Install Nginx and other dependencies
RUN apt-get update && apt-get install -y \
    nginx \
    netcat-traditional \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install gunicorn

# Copy frontend build
COPY --from=frontend-build /frontend/dist /usr/share/nginx/html

# Copy application code
COPY . /app/

# Copy nginx configuration
COPY nginx/prod.conf /etc/nginx/conf.d/default.conf
RUN rm -f /etc/nginx/sites-enabled/default

# Create directories for static and media files
RUN mkdir -p /usr/share/nginx/html/static && \
    mkdir -p /usr/share/nginx/html/media

# Set Python path
ENV PYTHONPATH=/app:$PYTHONPATH

# Copy entrypoint script
COPY docker-entrypoint.prod.sh /docker-entrypoint.sh
RUN chmod +x /docker-entrypoint.sh

EXPOSE 80

ENTRYPOINT ["/docker-entrypoint.sh"] 